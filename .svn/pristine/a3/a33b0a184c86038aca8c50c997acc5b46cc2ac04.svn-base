package controllers;

import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.util.ArrayList;
import java.util.Random;

import javax.crypto.spec.PSource;
import javax.swing.ImageIcon;

import models.Ball;
import models.ClubEnum;
import models.Position;
import models.Record;
import models.TrainingScenario;
import models.TrainingSession;
import models.TrainingRecord;
import models.Trajectory;
import models.User;
import service.Database;
import service.ShotSimulatorService;
import views.AAnimationScreen;
import views.GameScreen;
import views.TrainingScreen;

public class TrainingController extends AAnimationScreenController {

	/****************** attributes ******************/
	private TrainingSession session;
	
	/****************** attributes ends *************/

	/****************** constructors ******************/
	public TrainingController(IRopeItController ropeitController) {
		super(ropeitController);
		//this.scenarioController=new ScenarioController(ScenarioEnum.TRAINING_SCENARIO);
		this.scenario=new TrainingScenario();
		
		this.screen = new TrainingScreen(this);
		
		

		setupReturnMainMenuListener();
		
//		// connecto to hit ball button in screen
//		((TrainingScreen)this.screen).setHitBallButtonListener(new ActionListener() {
//			
//			@Override
//			public void actionPerformed(ActionEvent e) {
//				hitBall();
//			}
//		});
	}

	/****************** constructors ends *************/

	/****************** private methods ******************/
	private void createNewSession(){
		User user = ropeitController.getCurrentUser();
		this.session = new TrainingSession(user);
	}
	
	private void printPositions(ArrayList<Position> positions){
		for(Position p : positions){
			System.out.println(p.x + "\t" + p.y + "\t" + p.z);
		}
	}
	
	
	/****************** private methods ends *************/

	/****************** properties ******************/
	// To do: setters and getters code here
	/****************** properties ends *************/

	/****************** public methods ******************/
	/**
	 * Generate a random shot, and store it to session.
	 */
	@Override
	public void hitBall(){
		// return if no ball to hit.
		if(this.scenario.isBallOnTee()==false){
			return;
		}
		// generate random shot.
		Random r = new Random();
		double velocity = 100 + 60 * r.nextDouble();
		double vertAngle = 7 + (20 - 7) * r.nextDouble();
		double horizontalAngle = -0.5 + 1 * r.nextDouble();
		double spinRate = 2000 + (7000 - 2000) * r.nextDouble();
		ArrayList<Position> positions= ShotSimulatorService.calcBallFlight(velocity, vertAngle, horizontalAngle, spinRate);
		scaledPositions(positions);
		// assign positions to ball
		this.scenario.setupBall(positions);
		
		//printPositions(positions);
		// store to session
		Position lastPosition = positions.get(positions.size()-1);
		double xLanding = lastPosition.x;
		double zLanding = lastPosition.z;
		this.session.addRecord(velocity,vertAngle,horizontalAngle, spinRate,xLanding,zLanding);
		// display animation.
		this.scenario.hitABall();
	}
	public ClubEnum switchClub() {
		if(this.session.getIron() == ClubEnum.IRON5){
			this.session.setIron(ClubEnum.IRON9);
			return ClubEnum.IRON9;
		}
		else{
			this.session.setIron(ClubEnum.IRON5);
			return ClubEnum.IRON5;
		}
	}

	@Override
	public void replay(){
		this.isReplay=true;
		this.scenario.replay();
	}
	@Override
	public void tickScenario(){
		super.tickScenario();
		
	}
	
	@Override
	public void ballLanded(Ball ball){
		if(isReplay){ // don't record replay
			isReplay=false;
			return;
		}
		// display last shot when ball landed.
		double maxDistance= ball.getTrajectory().getMaxDistance();
		double maxHeight= ball.getTrajectory().getMaxHeight();
		((TrainingScreen)this.screen).showLastShot(maxDistance, maxHeight);
	}
	@Override
	public void start() {
		super.start();
		this.createNewSession();
	}
	
	@Override
	public void stop(){
		super.stop();
		// save session to database.
		if(this.session!=null){
			//System.out.println(this.session.getRecords().size());
			for(Record record : this.session.getRecords()){
				Database.getInstance().insertTrainingRecord((TrainingRecord) record);
			}
			// discard session.
			this.session=null;
		}
		
	}
	/****************** public methods ends *************/

}
